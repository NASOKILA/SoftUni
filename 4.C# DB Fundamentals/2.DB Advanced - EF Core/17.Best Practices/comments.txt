
Best Practices Comments:
	kak da pishem kachestven kod koito da moje da se proverqva ot drugi hora,
	kak da si strukturirame samiq proekt za da moje da se polzva i ot drugi hora.
	
	1.Project Structure
	2.Optimizacii na EF Core
	3.Disain patterns

	Nqma da go ima na izpita no e hubavo da go znaem zashtoto SHTE GO POLZVAME V REALNATA PRAKTIKA.
	HashSet e spisuk no samo s unikalni stoinoti.
	
	Mnogo puti shte ni se nalaga da rabotim s mnogo solutioni.
	S mnogo bazi s razlichni connection stringove.	

	Za optimizaciq na koda se polzva SOLID PRINCIPLES: 
	S tezi principi nashiq kod e po 
	SCALABLE (t.e. moje da raboti i malko i s mnogo useri ednakvo), koda se poddurja po lesno,
	po lesno se raboti s nego i po lesno se testva nashiq kod. 
	
	S - Single Responsability
	O - Open / Closed 
	L - Liskov Substitution
	I - Interface Segregation
	D - Dependency Invercion




Project Organization:
	KODA NI MOJE DA SE DELI NA SEKCII:
	1.DataLayer - DbContext (tuk si pravim vruzkata s bazata (ZNAEM) )
	2.Domain Methods - Klasovete ni, migracii i dr
	3.Clien - Tova ni e samoto prilojenie koeto polzva usera
	4.Buisness logic - validacii i transformacii 

VAJNO E VSICHKO DA E OTDELNO I DA SI IMA OTDELNI PROEKTI.
	Po lesno se namirat greshkite.
	 	
	


Usage Optimization:
	Shte sreshtame v praktikata golqmi proekti s golqmi bazi ot 100 tablici 
	vajno e da DURPAME SAMO TEZI DANNI KOITO NI TRQBVAT (S ANONIMNI OBEKTI).

	
MATERIALIZACIQ NA QUERITA
	VAJNOOOOOOOOOOOOOOOOOOOO!!!!!!!!!!!!!!!!!
	Trqbva da slagame .toList() ili .ToArray() nakraq na ORM zaqvkite ni,
	SAMO TOGAVA TE SE IZPRASHTAT KUM BAZATA.
	Ili kogato polzvame Aggregaciq na danni sus .Count()   .Average()  .Sum()  . . .
	
	
	Hubavo e da dobavqme dannite s AddRange() i da gi mahame s RemoveRange().


	VAJNO !!!: AKO ISKAME SAMO DA VIZUALIZIRAME DANNI BEZ DA GI PROMENQME, POLZVAME .AsNoTracking() 
	Pri durpane na danni ot bazta s .AsNoTracking() te se izdurpvat otkacheni ot bazata,
	t.e. dori i da gi promenqme ili iztrivame nqma da stane , MOJE SAMO DA GI VIZUALIZIRAME.
	


Loading Methods:
	Lazy  -  Po malko danni s povehe zaqvki, pri polzvameto se durpat dannite, nqma go v EFCORE
	Eager  -  Poveche danni s po malko zaqvki

	Za razlichni situacii se polzvat razlichni neshta.


 
KATO CQLO IDEQTA E VSICHKO DA E RAZDELENO V OTDELNI IMPLEMENTACII I DA E NEZAVISIMO, 
TAKA STAVA PO LESNO ZA PODDRUJKA I IMPLEMENTACIQ !!!


VAJNO : VSICHKI INTERFEISI TRQBVA DA SE DOBAVQT V STARTUP-a !!!!!!
	






