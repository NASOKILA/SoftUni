
ORM e doctrine framework, oznachava Object Relational Mappring

ZA SUZDAVANE NA ENTITY PISHEM V KONZOLATA:
1.php bin/console doctrine:generate:entity

2.Now we need to choose appropriate name for our entity. Use the following name:
SoftUniBlogBundle:Article

3.Press Enter once

4.Start typing the properties you want the entity to have

ZA DA NAPRAVIM UPDATE NA BAZATA PISHEM V KONZOLATA:
php bin/console doctrine:schema:update --force

Primerno:
 @ORM\Column(name="title", type="string", length="255")
S tova kazvame che iskame kolona s ine "title" ot tip "string" i duljina "255"
I TOVA DIREKTNO SE ZAPISVA V BAZATA


//SUZDAVAME SI $authorId:

    // SUZDAVAME SI AOUTHORID AND SAVE IT IN THE DATABASE
    /**
     * @var string
     * @ORM\Column(name="authorId", type="intege")
     */
    private $authorId;


    //trqbvat ni get i set metodi za authorid :

    /**
     * @return string
     */
    public function getAuthorId()
    {
        return $this->authorId;
    }


    /**
     * @param string $authorId
     *
     * @return $Article
     */
    public function setAuthorId($authorId)
    {
        $this->authorId = $authorId;
        return $this;
    }

//PRAVIM SI I KONSTRUKTOR:
    // WE SET DEFAUlt VALUES FOR OUR ENTITIES BY CREATING A CONSTRUKTOR
    // The constructors are special methods that are called each time
    // a new object from the entity is created.

    public function __construct()
    {
        $this->dateAdded = new \DateTime('now');
        // Every time we create a new article, it will add the current time
    }
  
    
    


Suzdavame vruzka mejdu Useri i Artikuli:
We’re using the “ManyToOne” annotation to tell the program that one user will have many articles. 
The other annotation is “JoinColumn”, which tells Doctrine how are we going to connect the fields in our entities. That the field “authorId” in our article entity will correspond to the “id” field from the User entity. 


    // V Article.php si pravim %uthor ot tip User i si dobavqme drugite dve anotacii
    /*
     We’re using the “ManyToOne” annotation to tell the program that one user will
     have many articles.
     The other annotation is “JoinColumn”, which tells Doctrine how are we going
     to connect the fields in our entities. That the field “authorId” in our article
     entity will correspond to the “id” field from the User entity.
    */

    /** @var  User
     *
     *@ORM\ManyToOne(targetEntity="SoftUniBlogBundle\Entity\User",inversedBy="articles")
     *@ORM\JoinColumn(name="authorId", referencedColumnName="id")
     */
    private $author;



    // PRAVIM SI GETERI I SETERI ZA $authorId

    /**
     * @param User $author
     * @return Article
     */
    public function setAuthor(User $author = null)
    {
        $this->author = $author;

        return $this;
    }

    /**
     * @return User
     */
    public function getAuthor()
    {
        return $this->author;
    }





SEGA PRAVIM OneToMany() Relationship v User.php


  
    // PRAVIM SI $articles SUS KONSTRUKTOR I SET, GET METODI:
    // This field will be of type ArrayCollection, that will keep all of the current user posts
    /**
     * @var ArrayCollection
     * @ORM\OneToMany(targetEntity="SoftUniBlogBundle\Entity\Article", mappedBy="author")
     */
    private $articles;

    // CREATE CONSTRUKTOR FOR DEFAULT SETTINGS FOR THE NEW USERS
    // WE WANT THEM TO RECIEVE AN EMPTY ARRAY OF ARTICLES

    public function __construct()
    {
        $this->articles = new ArrayCollection();
    }




// WE SET and GET THE $summary

    /**
     * Get summary
     *
     * @return string
     */
    public function getSummary()
    {
            if($this->summary === null)
            {
                $this->setSummary();
            }
            return $this->summary;
            
        // It simply returns the saved value in our summary variable.
        // However, if summary is empty, it should call the mutator to set the value
    }

    
    /**
     * @param string
     */
    public function setSummary()
    {
    // We to set the value of the summary to half of the article content
        $this->summary = substr($this->getContent(),
                0, strlen($this->getContent()) / 2
            ) . " . . .";
    }







GOTOVO!

SET DEFAULT VALUES FOR OUR ENTITYES:
NAPRAVIHME SI VECHE KONSTRUKTURITE.



UPDATE THE DATABASE:
php bin/console doctrine:schema:update --force




// BEFORE START WORING IN THE KONTROLLER WE NEED AN Article Type: PRAVIM GO VUV PAPKA form !!!

Mahame getBlockPrefix() metoda
V configureOptions() metoda

TAKA IZGLEJDAT OSTANALITE FUNCKCII:
public function buildForm(FormBuilderInterface $builder, array $options)
    {

    // HERE WE WILL CREATE OUR FORM
        $builder
            ->add('title', TextType::class)
            ->add('content', TextType::class);
        // TectType TRQBVA DA E FormExtension ...
    
    }

    public function configureOptions(OptionsResolver $resolver)
    {

        // HERE WE WILL telL Our Form that IT'S TYPE IS Article
        $resolver->setDefaults(array(
           'data_class' => 'SoftUniBlogBundle\Entity\Article' 
        ));
 //The default value for our resolver tells controller that is going to use the form

    }





//SEGA VECHE MOJEM DA ZAPOCHNEM S KONtroLLerA :
1.Pravim si create() funkciqta	
IMPORT :
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\Request;







Fill the form and click “Submit”. The page gets refreshed



CREATE THE LIST PAGE : 
  /**
     * @Route("/articles/list", name="article_list")
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function list()
    {
        // vikame si repositorito na artikulite
        $repository = $this
            ->getDoctrine()
            ->getRepository(Article::class);

        // i ot tam durpame vsichi artikuli
        $articles = $repository->findAll();

        return $this->render('articles/list.html.twig',
            [
                'articles' => $articles
            ]);
    }




 PRAVIM SI I edit() funkciq koqto pokazva po edinichno vseki artikul kato dadem na Read More butona :


    /**
     * @Route("/articles/{id}", name="article_edit")
     * @param $id
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function edit($id)
    {
        $repository = $this
            ->getDoctrine()
            ->getRepository(Article::class);

        $article = $repository->find($id);

        return $this->render('articles/edit.html.twig',
            [
                'article' => $article
            ]);
    }




