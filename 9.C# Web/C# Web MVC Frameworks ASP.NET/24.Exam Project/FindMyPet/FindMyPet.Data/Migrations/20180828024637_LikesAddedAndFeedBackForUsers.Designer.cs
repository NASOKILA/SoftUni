// <auto-generated />
using System;
using FindMyPet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FindMyPet.Data.Migrations
{
    [DbContext(typeof(FindMyPetDbContext))]
    [Migration("20180828024637_LikesAddedAndFeedBackForUsers")]
    partial class LikesAddedAndFeedBackForUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FindMyPet.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("CreatorId");

                    b.Property<string>("CreatorId1");

                    b.Property<int>("PetId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId1");

                    b.HasIndex("PetId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FindMyPet.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<string>("Content");

                    b.Property<int>("CreatorId");

                    b.Property<string>("CreatorId1");

                    b.Property<int?>("MessageId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatorId1");

                    b.HasIndex("MessageId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("FindMyPet.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("ReceverId");

                    b.Property<string>("ReceverId1");

                    b.Property<int>("SenderId");

                    b.Property<string>("SenderId1");

                    b.HasKey("Id");

                    b.HasIndex("ReceverId1");

                    b.HasIndex("SenderId1");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FindMyPet.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("Breed");

                    b.Property<string>("Color");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("FounderId");

                    b.Property<string>("FounderId1");

                    b.Property<bool>("Gender");

                    b.Property<string>("LocationLost");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.Property<string>("OwnerId1");

                    b.Property<DateTime>("TimeFound");

                    b.Property<DateTime>("TimeLost");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FounderId1");

                    b.HasIndex("OwnerId1");

                    b.ToTable("Pet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pet");
                });

            modelBuilder.Entity("FindMyPet.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FeedBack");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FindMyPet.Models.Bird", b =>
                {
                    b.HasBaseType("FindMyPet.Models.Pet");

                    b.Property<double>("FlyingSpeedPerKm");

                    b.Property<double>("WingsSizeInCentimeters");

                    b.ToTable("Bird");

                    b.HasDiscriminator().HasValue("Bird");
                });

            modelBuilder.Entity("FindMyPet.Models.Cat", b =>
                {
                    b.HasBaseType("FindMyPet.Models.Pet");

                    b.Property<bool>("ClimbsOnTrees");

                    b.Property<bool>("HatesMouses");

                    b.ToTable("Cat");

                    b.HasDiscriminator().HasValue("Cat");
                });

            modelBuilder.Entity("FindMyPet.Models.Dog", b =>
                {
                    b.HasBaseType("FindMyPet.Models.Pet");

                    b.Property<bool>("HatesCats");

                    b.Property<bool>("IsFrendyToPeople");

                    b.ToTable("Dog");

                    b.HasDiscriminator().HasValue("Dog");
                });

            modelBuilder.Entity("FindMyPet.Models.Comment", b =>
                {
                    b.HasOne("FindMyPet.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId1");

                    b.HasOne("FindMyPet.Models.Pet", "Pet")
                        .WithMany("Comments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FindMyPet.Models.Like", b =>
                {
                    b.HasOne("FindMyPet.Models.Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId");

                    b.HasOne("FindMyPet.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId1");

                    b.HasOne("FindMyPet.Models.Message")
                        .WithMany("Likes")
                        .HasForeignKey("MessageId");
                });

            modelBuilder.Entity("FindMyPet.Models.Message", b =>
                {
                    b.HasOne("FindMyPet.Models.User", "Recever")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceverId1");

                    b.HasOne("FindMyPet.Models.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId1");
                });

            modelBuilder.Entity("FindMyPet.Models.Pet", b =>
                {
                    b.HasOne("FindMyPet.Models.User", "Founder")
                        .WithMany("PetsFound")
                        .HasForeignKey("FounderId1");

                    b.HasOne("FindMyPet.Models.User", "Owner")
                        .WithMany("PetsLost")
                        .HasForeignKey("OwnerId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FindMyPet.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FindMyPet.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FindMyPet.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FindMyPet.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
